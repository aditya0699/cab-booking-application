// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/cabBookingService.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	models "github.com/cab-booking-application/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIBookingService is a mock of IBookingService interface.
type MockIBookingService struct {
	ctrl     *gomock.Controller
	recorder *MockIBookingServiceMockRecorder
}

// MockIBookingServiceMockRecorder is the mock recorder for MockIBookingService.
type MockIBookingServiceMockRecorder struct {
	mock *MockIBookingService
}

// NewMockIBookingService creates a new mock instance.
func NewMockIBookingService(ctrl *gomock.Controller) *MockIBookingService {
	mock := &MockIBookingService{ctrl: ctrl}
	mock.recorder = &MockIBookingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookingService) EXPECT() *MockIBookingServiceMockRecorder {
	return m.recorder
}

// CancelRide mocks base method.
func (m *MockIBookingService) CancelRide(rideID string) *models.Ride {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRide", rideID)
	ret0, _ := ret[0].(*models.Ride)
	return ret0
}

// CancelRide indicates an expected call of CancelRide.
func (mr *MockIBookingServiceMockRecorder) CancelRide(rideID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRide", reflect.TypeOf((*MockIBookingService)(nil).CancelRide), rideID)
}

// CompleteRide mocks base method.
func (m *MockIBookingService) CompleteRide(rideID string) *models.Ride {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRide", rideID)
	ret0, _ := ret[0].(*models.Ride)
	return ret0
}

// CompleteRide indicates an expected call of CompleteRide.
func (mr *MockIBookingServiceMockRecorder) CompleteRide(rideID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRide", reflect.TypeOf((*MockIBookingService)(nil).CompleteRide), rideID)
}

// CreateRide mocks base method.
func (m *MockIBookingService) CreateRide(payload *models.RideRequest) (*models.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRide", payload)
	ret0, _ := ret[0].(*models.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRide indicates an expected call of CreateRide.
func (mr *MockIBookingServiceMockRecorder) CreateRide(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRide", reflect.TypeOf((*MockIBookingService)(nil).CreateRide), payload)
}

// FetchAvailableCabs mocks base method.
func (m *MockIBookingService) FetchAvailableCabs(srcLat, srcLng float64) (map[string][]*models.Cab, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAvailableCabs", srcLat, srcLng)
	ret0, _ := ret[0].(map[string][]*models.Cab)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAvailableCabs indicates an expected call of FetchAvailableCabs.
func (mr *MockIBookingServiceMockRecorder) FetchAvailableCabs(srcLat, srcLng interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAvailableCabs", reflect.TypeOf((*MockIBookingService)(nil).FetchAvailableCabs), srcLat, srcLng)
}

// GetDriverEarnings mocks base method.
func (m *MockIBookingService) GetDriverEarnings(driverId string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverEarnings", driverId)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetDriverEarnings indicates an expected call of GetDriverEarnings.
func (mr *MockIBookingServiceMockRecorder) GetDriverEarnings(driverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverEarnings", reflect.TypeOf((*MockIBookingService)(nil).GetDriverEarnings), driverId)
}
